const map = [
    [0, 1, 0, 0, 1],
    [1, 0, 1, 1, 0],
    [0, 1, 0, 0, 1],
    [1, 0, 1, 1, 0],
    [0, 1, 0, 0, 1]
];

const tileSize = 40;
const offsetX = window.innerWidth / 2;
const offsetY = window.innerHeight / 4;

// Definir el personaje
const player = {
    x: 2, // Posición inicial en términos de coordenadas del mapa
    y: 2,
    color: '#ff0000',
    size: tileSize / 2
};

window.onload = function() {
    const canvas = document.getElementById('gameCanvas');
    const context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    function drawIsometricTile(x, y, size, color) {
        context.beginPath();
        context.moveTo(x, y);
        context.lineTo(x + size, y - size / 2);
        context.lineTo(x, y - size);
        context.lineTo(x - size, y - size / 2);
        context.closePath();
        context.fillStyle = color;
        context.fill();
        context.strokeStyle = '#000';
        context.stroke();
    }

    function drawMap(map) {
        for (let row = 0; row < map.length; row++) {
            for (let col = 0; col < map[row].length; col++) {
                const tileX = (col - row) * tileSize + offsetX;
                const tileY = (col + row) * tileSize / 2 + offsetY;
                const color = map[row][col] === 1 ? '#6b8e23' : '#8b4513';
                drawIsometricTile(tileX, tileY, tileSize, color);
            }
        }
    }

    function drawPlayer() {
        const isoX = (player.x - player.y) * tileSize + offsetX;
        const isoY = (player.x + player.y) * tileSize / 2 + offsetY;

        context.beginPath();
        context.arc(isoX, isoY - tileSize / 4, player.size, 0, Math.PI * 2);
        context.fillStyle = player.color;
        context.fill();
        context.strokeStyle = '#000';
        context.stroke();
    }

    function movePlayer(dx, dy) {
        const newX = player.x + dx;
        const newY = player.y + dy;

        // Verifica si la nueva posición está dentro de los límites del mapa
        if (newX >= 0 && newX < map[0].length && newY >= 0 && newY < map.length) {
            player.x = newX;
            player.y = newY;
        }
    }

    window.addEventListener('keydown', function(event) {
        switch (event.key) {
            case 'ArrowUp':
                movePlayer(0, -1); // Mover arriba (norte)
                break;
            case 'ArrowDown':
                movePlayer(0, 1); // Mover abajo (sur)
                break;
            case 'ArrowLeft':
                movePlayer(-1, 0); // Mover izquierda (oeste)
                break;
            case 'ArrowRight':
                movePlayer(1, 0); // Mover derecha (este)
                break;
        }
        render();
    });

    function render() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        drawMap(map);
        drawPlayer();
    }

    render();
}




//

const map = [
    [0, 1, 0, 0, 1],
    [1, 0, 1, 1, 0],
    [0, 1, 0, 0, 1],
    [1, 0, 1, 1, 0],
    [0, 1, 0, 0, 1]
];

const player = {
    x: 2, // Columna inicial
    y: 2  // Fila inicial
};

window.onload = function() {
    const canvas = document.getElementById('gameCanvas');
    const context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const tileSize = 40;
    const spriteSize = 40; // Tamaño del sprite

    const sprite = new Image();
    sprite.src = 'sprite.png';

    function drawIsometricTile(x, y, size, color) {
        const isoX = (x - y) * size + canvas.width / 2 - (map[0].length * size) / 2;
        const isoY = (x + y) * size / 2 + canvas.height / 4 - (map.length * size) / 4;
        context.beginPath();
        context.moveTo(isoX, isoY);
        context.lineTo(isoX + size, isoY - size / 2);
        context.lineTo(isoX, isoY - size);
        context.lineTo(isoX - size, isoY - size / 2);
        context.closePath();
        context.fillStyle = color;
        context.fill();
        context.strokeStyle = '#000';
        context.stroke();
    }

    function drawMap(map) {
        for (let row = 0; row < map.length; row++) {
            for (let col = 0; col < map[row].length; col++) {
                const color = map[row][col] === 1 ? '#6b8e23' : '#8b4513';
                drawIsometricTile(col, row, tileSize, color);
            }
        }
    }

    function drawPlayer(x, y, size) {
        const isoX = (x - y) * size + canvas.width / 2 - (map[0].length * size) / 2;
        const isoY = (x + y) * size / 2 + canvas.height / 4 - (map.length * size) / 4;
        context.drawImage(sprite, (isoX - spriteSize / 2) , (isoY - spriteSize / 2) - spriteSize, spriteSize, spriteSize);
    }

    function drawGame() {
        context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el canvas
        drawMap(map);
        drawPlayer(player.x, player.y, tileSize);
    }

    document.addEventListener('keydown', function(event) {
        let newX = player.x;
        let newY = player.y;

        switch(event.key) {
            case 'ArrowUp':
                newY--;
                break;
            case 'ArrowDown':
                newY++;
                break;
            case 'ArrowLeft':
                newX--;
                break;
            case 'ArrowRight':
                newX++;
                break;
        }

        // Comprobar que el nuevo movimiento esté dentro de los límites del mapa
        if (newX >= 0 && newX < map[0].length && newY >= 0 && newY < map.length) {
            player.x = newX;
            player.y = newY;
        }

        drawGame();
    });

    sprite.onload = function() {
        drawGame();
    };
}

//

document.addEventListener('keydown', function(event) {
		const player = players[currentPlayerIndex];
		let newX = player.x;
		let newY = player.y;
		let change = false;

		switch(event.key) {
			case player.keyUp:
					newY--;
					player.actMov--;
					change = true;
					break;
			case player.keyDown:
					newY++;
					player.actMov--;
					change = true;
					break;
			case player.keyLeft:
					newX--;
					player.actMov--;
					change = true;
					break;
			case player.keyRight:
					newX++;
					player.actMov--;
					change = true;
					break;
		}

			// Comprobar que el nuevo movimiento esté dentro de los límites del mapa
		if (newX >= 0 && newX < map[0].length && newY >= 0 && newY < map.length) {
			player.x = newX;
			player.y = newY;
		}else{
			change = false;
			player.actMov++;
		}
		if(change && (player.actMov > 0)){
			drawGame();
		}else if(change && (player.actMov == 0)){
			player.actMov = player.maxMov;
			switchTurn();
			drawGame();
		}
    });

